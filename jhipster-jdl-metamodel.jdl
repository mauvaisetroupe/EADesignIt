relationship ManyToMany {
	LandscapeView{flows(alias)} to FunctionalFlow{landscape(diagramName) }
	
	
    DataFlow{functionalFlows(alias)} to FunctionalFlow{dataFlows}
	
    Application{categories(name)} to ApplicationCategory{applications(name)}
	ApplicationComponent{categories(name)} to ApplicationCategory{components(name)}
	
    Application{technologies(name)} to Technology{applications(name)}
	ApplicationComponent{technologies(name)} to Technology{components(name)}
    
    Owner{users(login)} to User 

    Application{externalIDS(externalID)} to ExternalReference{applications(alias)}
    ApplicationComponent{externalIDS(externalID)} to ExternalReference{components(alias)}
    
    CapabilityApplicationMapping{landscape(diagramName)} to LandscapeView{capabilityApplicationMapping}

}

relationship ManyToOne {
	FlowInterface{source(name) required} to Application
	FlowInterface{target(name) required} to Application
	FlowInterface{sourceComponent(name)} to ApplicationComponent
	FlowInterface{targetComponent(name)} to ApplicationComponent
    
	FlowInterface{protocol(name)} to Protocol

	ApplicationComponent{application(name) required} to Application{applicationsList(name)}
	
    LandscapeView{owner(name)} to Owner
    FunctionalFlow{owner(name)} to Owner
	FlowInterface{owner(name)} to Owner
    Application{owner(name)} to Owner
    Application{itOwner(name)} to Owner
    Application{businessOwner(name)} to Owner
	
    DataFlow{format(name)} to DataFormat
    
    FunctionalFlowStep{flowInterface(alias) required} to FlowInterface{steps}
    
    FunctionalFlowStep{group(alias)} to FlowGroup{steps required}
	FlowGroup{flow(alias)} to FunctionalFlow

    ExternalReference{externalSystem(externalSystemID)} to ExternalSystem

	CapabilityApplicationMapping to Capability
    CapabilityApplicationMapping to Application
    
    
	
}

relationship OneToMany {
	FlowInterface{dataFlows} to DataFlow{flowInterface(alias)}
	DataFlow{items} to DataFlowItem{dataFlow}
    Capability{subCapabilities(name)} to Capability{parent(name)}
    FunctionalFlow{steps} to FunctionalFlowStep{flow(alias) required}

}

entity ExternalReference {
    externalID String
}

entity ExternalSystem {
    externalSystemID String
}


entity FlowGroup {
    title String maxlength(100)
    url String maxlength(500)
    description String
}

entity LandscapeView {
    viewpoint ViewPoint
	diagramName String // Example ADD_Payment_Landscape
    compressedDrawXML TextBlob
    compressedDrawSVG TextBlob
}

entity Owner {
	name String required
	firstname String
	lastname String
    email String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
}

entity FunctionalFlow(flow) {
    alias String unique
    description String maxlength(1500)
    comment String maxlength(1000)  
    status String
    documentationURL String maxlength(500)
    documentationURL2 String maxlength(500)
    startDate LocalDate
    endDate LocalDate
}

entity FunctionalFlowStep(flowstep) {
    description String maxlength(500)
    stepOrder Integer
}

entity FlowInterface(interface) {
    alias String required unique // mandatory for label on arrow diagram
    status String
    documentationURL String maxlength(500)
    documentationURL2 String maxlength(500)
    description String maxlength(1500)    
    startDate LocalDate
    endDate LocalDate
}

entity Application {
	alias String unique
	name String required
    description String maxlength(1500)
    comment String maxlength(1000)  
    documentationURL String maxlength(500)
    startDate LocalDate
    endDate LocalDate
    applicationType ApplicationType
	softwareType SoftwareType
	nickname String
}

entity Protocol {
	name String required
    type ProtocolType required
    description String maxlength(1000)
    scope String
}

/**
 * DataFlow represents 
 * - A file when Protocol=FILE
 * - A topic when Protocol=Event
 * - A Swagger when Protocol=API
 * - A WSDL when Protocol=SOAP
 * - An XSD when Protocol=ESB, MESSAGING
 */
entity DataFlow(dataflow) {
    resourceName String required /** TOPIC name for event, FileName for Files*/
    resourceType String
    description String maxlength(1000)
    frequency Frequency
    contractURL String maxlength(500) /** Swagger or XSD URL */
    documentationURL String maxlength(500)
    startDate LocalDate
    endDate LocalDate    
}

/**
 * DataFlow represents 
 * - A Event when DataFlow.Protocol=Event
 */
entity DataFlowItem {
    resourceName String required
    resourceType String
    description String maxlength(1000)  
    contractURL String maxlength(500)
    documentationURL String maxlength(500)
    startDate LocalDate
    endDate LocalDate
}


entity ApplicationComponent(component) {
    alias String unique
	name String required
    description String maxlength(1000),
    comment String maxlength(500)  
    documentationURL String maxlength(500)
    startDate LocalDate
    endDate LocalDate
	applicationType ApplicationType
	softwareType SoftwareType  
    displayInLandscape Boolean
}

entity DataFormat {
	name String required
}

entity ApplicationCategory {
    name String required
    type String
    description String maxlength(250)     
}

entity Technology {
    name String required
    type String
    description String maxlength(250)  
}

entity Capability { 
	name String required
	description String maxlength(1500)
	comment String maxlength(1500)
    level Integer
}

entity CapabilityApplicationMapping{

}

enum ViewPoint {
  APPLICATION_LANDSCAPE
}

enum ProtocolType {
  API
  ESB
  EVENT
  FILE
  MESSAGING
  SOAP
  ETL
  DB
  FRONT
  OTHER
}

enum Frequency {
	HOURLY
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
    ON_DEMAND
    NRT
    ON_USER_ACTION
    INTRADAY
}

enum ApplicationType {
	SOFTWARE
    MIDDLEWARE
	HARDWARE
	PARTNER
	OTHER
}

enum SoftwareType {
    ON_PREMISE_COTS
    ON_PREMISE_CUSTOM
    CLOUD_CUSTOM
    CLOUD_SAAS
    CLOUD_THIRD_PARTY
    ON_PREMISE_EXTERNAL_LIBRARY
}